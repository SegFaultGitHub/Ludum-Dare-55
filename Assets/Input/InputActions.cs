//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Globals"",
            ""id"": ""920c043d-8725-4093-a8a8-c7be3288145f"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""d79aab93-93ee-4984-9d41-d306f16622dd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveBlock"",
                    ""type"": ""Button"",
                    ""id"": ""b3bdbb96-dd20-4886-8a24-1d2989677064"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4df28123-0089-4ac4-94e2-190485e21494"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41f741c5-9f21-4cab-90f9-4975f1025af7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Globals
        m_Globals = asset.FindActionMap("Globals", throwIfNotFound: true);
        m_Globals_MousePosition = m_Globals.FindAction("MousePosition", throwIfNotFound: true);
        m_Globals_MoveBlock = m_Globals.FindAction("MoveBlock", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Globals
    private readonly InputActionMap m_Globals;
    private List<IGlobalsActions> m_GlobalsActionsCallbackInterfaces = new List<IGlobalsActions>();
    private readonly InputAction m_Globals_MousePosition;
    private readonly InputAction m_Globals_MoveBlock;
    public struct GlobalsActions
    {
        private @InputActions m_Wrapper;
        public GlobalsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Globals_MousePosition;
        public InputAction @MoveBlock => m_Wrapper.m_Globals_MoveBlock;
        public InputActionMap Get() { return m_Wrapper.m_Globals; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalsActions set) { return set.Get(); }
        public void AddCallbacks(IGlobalsActions instance)
        {
            if (instance == null || m_Wrapper.m_GlobalsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GlobalsActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @MoveBlock.started += instance.OnMoveBlock;
            @MoveBlock.performed += instance.OnMoveBlock;
            @MoveBlock.canceled += instance.OnMoveBlock;
        }

        private void UnregisterCallbacks(IGlobalsActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @MoveBlock.started -= instance.OnMoveBlock;
            @MoveBlock.performed -= instance.OnMoveBlock;
            @MoveBlock.canceled -= instance.OnMoveBlock;
        }

        public void RemoveCallbacks(IGlobalsActions instance)
        {
            if (m_Wrapper.m_GlobalsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGlobalsActions instance)
        {
            foreach (var item in m_Wrapper.m_GlobalsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GlobalsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GlobalsActions @Globals => new GlobalsActions(this);
    public interface IGlobalsActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMoveBlock(InputAction.CallbackContext context);
    }
}
